"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Sparkles, Download, Loader2, BookOpen, Clock, Users } from "lucide-react"

interface GeneratedLesson {
  title: string
  duration: string
  level: string
  students: string
  objectives: string[]
  materials: string[]
  activities: Array<{
    time: string
    activity: string
    description: string
  }>
  assessment: string
  homework: string
}

export default function AILessonGeneratorPage() {
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedLesson, setGeneratedLesson] = useState<GeneratedLesson | null>(null)
  const [formData, setFormData] = useState({
    topic: "",
    level: "",
    duration: "",
    students: "",
    focus: "",
    additionalNotes: "",
  })

  const handleGenerate = async () => {
    setIsGenerating(true)

    // Simulate AI generation with realistic delay
    await new Promise((resolve) => setTimeout(resolve, 3000))

    // Generate lesson plan based on form data
    const lesson: GeneratedLesson = {
      title: `Spanish ${formData.topic} Lesson Plan`,
      duration: formData.duration || "45 minutes",
      level: formData.level || "Beginner",
      students: formData.students || "15-25",
      objectives: [
        `Students will learn key vocabulary related to ${formData.topic.toLowerCase()}`,
        `Students will practice pronunciation and listening skills`,
        `Students will apply new vocabulary in conversational contexts`,
        `Students will demonstrate understanding through interactive activities`,
      ],
      materials: [
        "Audio equipment for music playback",
        "Vocabulary flashcards",
        "Interactive whiteboard or projector",
        "Student worksheets",
        "Hip-hop backing tracks (optional)",
      ],
      activities: [
        {
          time: "5 min",
          activity: "Warm-up & Review",
          description: "Quick review of previous vocabulary and introduction to today's topic",
        },
        {
          time: "15 min",
          activity: `${formData.topic} Vocabulary Introduction`,
          description: `Introduce key ${formData.topic.toLowerCase()} vocabulary using visual aids and repetition`,
        },
        {
          time: "15 min",
          activity: "Interactive Practice",
          description: `Students practice new vocabulary through games and hip-hop rhythm exercises`,
        },
        {
          time: "8 min",
          activity: "Application Activity",
          description: `Students use new vocabulary in context through role-play or creative exercises`,
        },
        {
          time: "2 min",
          activity: "Wrap-up & Assessment",
          description: "Quick assessment and preview of next lesson",
        },
      ],
      assessment: `Vocabulary quiz, participation in activities, ${formData.focus ? formData.focus.toLowerCase() + " demonstration" : "oral assessment"}`,
      homework: `Practice new ${formData.topic.toLowerCase()} vocabulary at home, complete worksheet exercises`,
    }

    setGeneratedLesson(lesson)
    setIsGenerating(false)
  }

  const downloadLesson = () => {
    if (!generatedLesson) return

    const content = `
LESSON PLAN: ${generatedLesson.title}

OVERVIEW:
Duration: ${generatedLesson.duration}
Level: ${generatedLesson.level}
Students: ${generatedLesson.students}

LEARNING OBJECTIVES:
${generatedLesson.objectives.map((obj, i) => `${i + 1}. ${obj}`).join("\n")}

MATERIALS NEEDED:
${generatedLesson.materials.map((material, i) => `â€¢ ${material}`).join("\n")}

LESSON ACTIVITIES:
${generatedLesson.activities
  .map(
    (activity, i) => `
${i + 1}. ${activity.activity} (${activity.time})
   ${activity.description}
`,
  )
  .join("")}

ASSESSMENT:
${generatedLesson.assessment}

HOMEWORK:
${generatedLesson.homework}

ADDITIONAL NOTES:
${formData.additionalNotes || "None"}

---
Generated by Yo Hablo AI Lesson Generator
    `.trim()

    const blob = new Blob([content], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${generatedLesson.title.replace(/\s+/g, "_")}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-white dark:from-slate-950 dark:to-slate-900">
      <div className="container px-4 md:px-6 py-12">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <Sparkles className="h-12 w-12 text-purple-600" />
            <h1 className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              AI Lesson Generator
            </h1>
          </div>
          <p className="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
            Create custom Spanish lesson plans instantly with our AI-powered generator. Tailored to your specific
            curriculum needs and teaching style.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Form */}
          <Card className="h-fit">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BookOpen className="h-5 w-5" />
                Lesson Plan Details
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="topic">Lesson Topic *</Label>
                <Input
                  id="topic"
                  placeholder="e.g., Colors, Numbers, Family, Food..."
                  value={formData.topic}
                  onChange={(e) => setFormData({ ...formData, topic: e.target.value })}
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="level">Student Level</Label>
                  <Select value={formData.level} onValueChange={(value) => setFormData({ ...formData, level: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select level" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Beginner">Beginner</SelectItem>
                      <SelectItem value="Intermediate">Intermediate</SelectItem>
                      <SelectItem value="Advanced">Advanced</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="duration">Duration</Label>
                  <Select
                    value={formData.duration}
                    onValueChange={(value) => setFormData({ ...formData, duration: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select duration" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="30 minutes">30 minutes</SelectItem>
                      <SelectItem value="45 minutes">45 minutes</SelectItem>
                      <SelectItem value="60 minutes">60 minutes</SelectItem>
                      <SelectItem value="90 minutes">90 minutes</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="students">Number of Students</Label>
                  <Input
                    id="students"
                    placeholder="e.g., 15-25"
                    value={formData.students}
                    onChange={(e) => setFormData({ ...formData, students: e.target.value })}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="focus">Primary Focus</Label>
                  <Select value={formData.focus} onValueChange={(value) => setFormData({ ...formData, focus: value })}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select focus" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Vocabulary">Vocabulary</SelectItem>
                      <SelectItem value="Grammar">Grammar</SelectItem>
                      <SelectItem value="Pronunciation">Pronunciation</SelectItem>
                      <SelectItem value="Conversation">Conversation</SelectItem>
                      <SelectItem value="Culture">Culture</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="notes">Additional Notes (Optional)</Label>
                <Textarea
                  id="notes"
                  placeholder="Any specific requirements, activities, or notes for the lesson..."
                  value={formData.additionalNotes}
                  onChange={(e) => setFormData({ ...formData, additionalNotes: e.target.value })}
                  rows={3}
                />
              </div>

              <Button
                onClick={handleGenerate}
                disabled={!formData.topic || isGenerating}
                className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
                size="lg"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="h-5 w-5 mr-2 animate-spin" />
                    Generating Lesson Plan...
                  </>
                ) : (
                  <>
                    <Sparkles className="h-5 w-5 mr-2" />
                    Generate Lesson Plan
                  </>
                )}
              </Button>
            </CardContent>
          </Card>

          {/* Generated Lesson Plan */}
          <Card className="h-fit">
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Generated Lesson Plan</span>
                {generatedLesson && (
                  <Button onClick={downloadLesson} size="sm" variant="outline">
                    <Download className="h-4 w-4 mr-2" />
                    Download
                  </Button>
                )}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {!generatedLesson && !isGenerating && (
                <div className="text-center py-12 text-gray-500 dark:text-gray-400">
                  <BookOpen className="h-16 w-16 mx-auto mb-4 opacity-50" />
                  <p>Fill out the form and click "Generate" to create your custom lesson plan</p>
                </div>
              )}

              {isGenerating && (
                <div className="text-center py-12">
                  <Loader2 className="h-16 w-16 mx-auto mb-4 animate-spin text-purple-600" />
                  <p className="text-lg font-semibold">Creating your lesson plan...</p>
                  <p className="text-gray-500 dark:text-gray-400">This may take a few moments</p>
                </div>
              )}

              {generatedLesson && (
                <div className="space-y-6">
                  {/* Overview */}
                  <div>
                    <h3 className="text-xl font-bold mb-3">{generatedLesson.title}</h3>
                    <div className="grid grid-cols-3 gap-4 mb-4">
                      <div className="flex items-center gap-2">
                        <Clock className="h-4 w-4 text-blue-600" />
                        <span className="text-sm">{generatedLesson.duration}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Users className="h-4 w-4 text-green-600" />
                        <span className="text-sm">{generatedLesson.students}</span>
                      </div>
                      <Badge variant="outline">{generatedLesson.level}</Badge>
                    </div>
                  </div>

                  {/* Objectives */}
                  <div>
                    <h4 className="font-semibold mb-2">Learning Objectives</h4>
                    <ul className="list-disc list-inside space-y-1 text-sm">
                      {generatedLesson.objectives.map((obj, i) => (
                        <li key={i}>{obj}</li>
                      ))}
                    </ul>
                  </div>

                  {/* Activities */}
                  <div>
                    <h4 className="font-semibold mb-2">Lesson Activities</h4>
                    <div className="space-y-3">
                      {generatedLesson.activities.map((activity, i) => (
                        <div key={i} className="border-l-4 border-purple-500 pl-4">
                          <div className="font-medium text-sm">
                            {activity.activity} ({activity.time})
                          </div>
                          <div className="text-sm text-gray-600 dark:text-gray-400">{activity.description}</div>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Materials */}
                  <div>
                    <h4 className="font-semibold mb-2">Materials Needed</h4>
                    <ul className="list-disc list-inside space-y-1 text-sm">
                      {generatedLesson.materials.map((material, i) => (
                        <li key={i}>{material}</li>
                      ))}
                    </ul>
                  </div>

                  {/* Assessment & Homework */}
                  <div className="grid grid-cols-1 gap-4">
                    <div>
                      <h4 className="font-semibold mb-2">Assessment</h4>
                      <p className="text-sm">{generatedLesson.assessment}</p>
                    </div>
                    <div>
                      <h4 className="font-semibold mb-2">Homework</h4>
                      <p className="text-sm">{generatedLesson.homework}</p>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
