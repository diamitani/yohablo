"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Sparkles, Download, Loader2, RotateCcw, ChevronLeft, ChevronRight, Volume2 } from "lucide-react"

interface Flashcard {
  id: string
  spanish: string
  english: string
  category: string
}

export default function AIFlashcardsPage() {
  const [isGenerating, setIsGenerating] = useState(false)
  const [flashcards, setFlashcards] = useState<Flashcard[]>([])
  const [currentCard, setCurrentCard] = useState(0)
  const [isFlipped, setIsFlipped] = useState(false)
  const [formData, setFormData] = useState({
    topic: "",
    level: "",
    count: "10",
  })

  const handleGenerate = async () => {
    setIsGenerating(true)

    // Simulate AI generation
    await new Promise((resolve) => setTimeout(resolve, 2000))

    // Generate flashcards based on topic
    const topics: Record<string, Flashcard[]> = {
      Colors: [
        { id: "1", spanish: "rojo", english: "red", category: "Colors" },
        { id: "2", spanish: "azul", english: "blue", category: "Colors" },
        { id: "3", spanish: "verde", english: "green", category: "Colors" },
        { id: "4", spanish: "amarillo", english: "yellow", category: "Colors" },
        { id: "5", spanish: "negro", english: "black", category: "Colors" },
        { id: "6", spanish: "blanco", english: "white", category: "Colors" },
        { id: "7", spanish: "morado", english: "purple", category: "Colors" },
        { id: "8", spanish: "anaranjado", english: "orange", category: "Colors" },
        { id: "9", spanish: "rosa", english: "pink", category: "Colors" },
        { id: "10", spanish: "gris", english: "gray", category: "Colors" },
      ],
      Numbers: [
        { id: "1", spanish: "uno", english: "one", category: "Numbers" },
        { id: "2", spanish: "dos", english: "two", category: "Numbers" },
        { id: "3", spanish: "tres", english: "three", category: "Numbers" },
        { id: "4", spanish: "cuatro", english: "four", category: "Numbers" },
        { id: "5", spanish: "cinco", english: "five", category: "Numbers" },
        { id: "6", spanish: "seis", english: "six", category: "Numbers" },
        { id: "7", spanish: "siete", english: "seven", category: "Numbers" },
        { id: "8", spanish: "ocho", english: "eight", category: "Numbers" },
        { id: "9", spanish: "nueve", english: "nine", category: "Numbers" },
        { id: "10", spanish: "diez", english: "ten", category: "Numbers" },
      ],
      Family: [
        { id: "1", spanish: "madre", english: "mother", category: "Family" },
        { id: "2", spanish: "padre", english: "father", category: "Family" },
        { id: "3", spanish: "hermana", english: "sister", category: "Family" },
        { id: "4", spanish: "hermano", english: "brother", category: "Family" },
        { id: "5", spanish: "abuela", english: "grandmother", category: "Family" },
        { id: "6", spanish: "abuelo", english: "grandfather", category: "Family" },
        { id: "7", spanish: "tía", english: "aunt", category: "Family" },
        { id: "8", spanish: "tío", english: "uncle", category: "Family" },
        { id: "9", spanish: "prima", english: "female cousin", category: "Family" },
        { id: "10", spanish: "primo", english: "male cousin", category: "Family" },
      ],
    }

    const selectedCards = topics[formData.topic] || topics["Colors"]
    const count = Number.parseInt(formData.count)
    setFlashcards(selectedCards.slice(0, count))
    setCurrentCard(0)
    setIsFlipped(false)
    setIsGenerating(false)
  }

  const nextCard = () => {
    setCurrentCard((prev) => (prev + 1) % flashcards.length)
    setIsFlipped(false)
  }

  const prevCard = () => {
    setCurrentCard((prev) => (prev - 1 + flashcards.length) % flashcards.length)
    setIsFlipped(false)
  }

  const downloadFlashcards = () => {
    const content = `SPANISH FLASHCARDS - ${formData.topic}
Generated by Yo Hablo AI Flashcards

${flashcards
  .map(
    (card, i) => `
Card ${i + 1}:
Spanish: ${card.spanish}
English: ${card.english}
Category: ${card.category}
`,
  )
  .join("\n")}

---
Total Cards: ${flashcards.length}
Level: ${formData.level}
Generated on: ${new Date().toLocaleDateString()}
    `.trim()

    const blob = new Blob([content], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `Spanish_Flashcards_${formData.topic}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-white dark:from-slate-950 dark:to-slate-900">
      <div className="container px-4 md:px-6 py-12">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <Sparkles className="h-12 w-12 text-blue-600" />
            <h1 className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent">
              AI Flashcards
            </h1>
          </div>
          <p className="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
            Generate interactive Spanish flashcards instantly with our AI-powered system. Perfect for vocabulary
            practice and memorization.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Generator Form */}
          <Card className="h-fit">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Sparkles className="h-5 w-5" />
                Generate Flashcards
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="topic">Topic *</Label>
                <Select value={formData.topic} onValueChange={(value) => setFormData({ ...formData, topic: value })}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select topic" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Colors">Colors</SelectItem>
                    <SelectItem value="Numbers">Numbers</SelectItem>
                    <SelectItem value="Family">Family</SelectItem>
                    <SelectItem value="Food">Food</SelectItem>
                    <SelectItem value="Animals">Animals</SelectItem>
                    <SelectItem value="Body Parts">Body Parts</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="level">Level</Label>
                <Select value={formData.level} onValueChange={(value) => setFormData({ ...formData, level: value })}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select level" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Beginner">Beginner</SelectItem>
                    <SelectItem value="Intermediate">Intermediate</SelectItem>
                    <SelectItem value="Advanced">Advanced</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="count">Number of Cards</Label>
                <Select value={formData.count} onValueChange={(value) => setFormData({ ...formData, count: value })}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select count" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5 cards</SelectItem>
                    <SelectItem value="10">10 cards</SelectItem>
                    <SelectItem value="15">15 cards</SelectItem>
                    <SelectItem value="20">20 cards</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <Button
                onClick={handleGenerate}
                disabled={!formData.topic || isGenerating}
                className="w-full bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700"
                size="lg"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="h-5 w-5 mr-2 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Sparkles className="h-5 w-5 mr-2" />
                    Generate Cards
                  </>
                )}
              </Button>

              {flashcards.length > 0 && (
                <Button onClick={downloadFlashcards} variant="outline" className="w-full bg-transparent">
                  <Download className="h-4 w-4 mr-2" />
                  Download Flashcards
                </Button>
              )}
            </CardContent>
          </Card>

          {/* Flashcard Display */}
          <div className="lg:col-span-2">
            {flashcards.length === 0 && !isGenerating && (
              <Card className="h-96 flex items-center justify-center">
                <CardContent className="text-center">
                  <Sparkles className="h-16 w-16 mx-auto mb-4 text-gray-400" />
                  <p className="text-gray-500 dark:text-gray-400">
                    Select a topic and generate flashcards to start practicing
                  </p>
                </CardContent>
              </Card>
            )}

            {isGenerating && (
              <Card className="h-96 flex items-center justify-center">
                <CardContent className="text-center">
                  <Loader2 className="h-16 w-16 mx-auto mb-4 animate-spin text-blue-600" />
                  <p className="text-lg font-semibold">Generating flashcards...</p>
                </CardContent>
              </Card>
            )}

            {flashcards.length > 0 && (
              <div className="space-y-6">
                {/* Progress */}
                <div className="flex items-center justify-between">
                  <Badge variant="outline">
                    Card {currentCard + 1} of {flashcards.length}
                  </Badge>
                  <Badge className="bg-gradient-to-r from-blue-600 to-cyan-600 text-white">
                    {flashcards[currentCard]?.category}
                  </Badge>
                </div>

                {/* Flashcard */}
                <Card
                  className="h-96 cursor-pointer transition-all duration-300 hover:shadow-lg"
                  onClick={() => setIsFlipped(!isFlipped)}
                >
                  <CardContent className="h-full flex items-center justify-center p-8">
                    <div className="text-center">
                      {!isFlipped ? (
                        <div>
                          <div className="text-4xl md:text-6xl font-bold text-blue-600 mb-4">
                            {flashcards[currentCard]?.spanish}
                          </div>
                          <p className="text-gray-500 dark:text-gray-400">Click to reveal English</p>
                        </div>
                      ) : (
                        <div>
                          <div className="text-3xl md:text-5xl font-bold text-green-600 mb-4">
                            {flashcards[currentCard]?.english}
                          </div>
                          <div className="text-xl text-gray-600 dark:text-gray-400 mb-4">
                            {flashcards[currentCard]?.spanish}
                          </div>
                          <Button variant="outline" size="sm">
                            <Volume2 className="h-4 w-4 mr-2" />
                            Listen
                          </Button>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>

                {/* Navigation */}
                <div className="flex items-center justify-between">
                  <Button onClick={prevCard} variant="outline" disabled={flashcards.length <= 1}>
                    <ChevronLeft className="h-4 w-4 mr-2" />
                    Previous
                  </Button>

                  <Button onClick={() => setIsFlipped(!isFlipped)} variant="outline">
                    <RotateCcw className="h-4 w-4 mr-2" />
                    Flip Card
                  </Button>

                  <Button onClick={nextCard} variant="outline" disabled={flashcards.length <= 1}>
                    Next
                    <ChevronRight className="h-4 w-4 ml-2" />
                  </Button>
                </div>

                {/* Progress Bar */}
                <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <div
                    className="bg-gradient-to-r from-blue-600 to-cyan-600 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${((currentCard + 1) / flashcards.length) * 100}%` }}
                  />
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
